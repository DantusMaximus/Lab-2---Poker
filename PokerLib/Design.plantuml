@startuml Design
left to right direction
class GameFactory
{
    +IPokerGame NewGame(string[] playerNames)
    +IPokerGame LoadGame(string fileName)
}
GameFactory ==> IPokerGame
interface IPokerGame
{
    IPlayer[] Players
    void RunGame();

    void Exit();

    void SaveGameAndExit(string fileName);

    <<event>> NewDeal();

    <<event>> SelectCardsToDiscard(IPlayer player);

    <<event>> RecievedReplacementCards(IPlayer player)

    <<event>> ShowAllHands();

    <<event>> Winner(IPlayer winner);

    <<event>> Draw(IPlayer[] tiedPlayers);
}
IPokerGame "1" ==o "2-5"IPlayer
class StandardGame
{
    +StandardGame(string[] playerNames)
    +StandardGame(string fileName)
    -Deck deck;
    +IPlayer[] Players;
    void RunGame();

    void Exit();

    void SaveGameAndExit(string fileName);

    <<event>> NewDeal();

    <<event>> SelectCardsToDiscard(IPlayer player);

    <<event>> RecievedReplacementCards(IPlayer player)

    <<event>> ShowAllHands();

    <<event>> Winner(IPlayer winner);

    <<event>> Draw(IPlayer[] tiedPlayers);
}
StandardGame --> Player
StandardGame --> Deck
StandardGame ..|> IPokerGame
StandardGame --> GameFactory
StandardGame --> ScoreLogic
class ScoreLogic{
    -static HandType GetHighestHandType(IPlayer[] players)
    +static void SetHandType(ICard[] Hand)
    +static IPlayer[] DetermineWinners(List<IPlayer>)
}
ScoreLogic --> Hand
class Hand{
    +Hand(IPlayer player)
    +IPlayer{get;}
    +List<ICard> Hand{ get; set;};
    +HandType HandType{ get; set; }
    +ICard HighCard{get; set;}
}
Hand --> IPlayer
interface IPlayer{
    string Name { get; }

    ICard[] Hand { get; }

    HandType HandType { get; }

    int Wins { get; }

    ICard[] Discard {get; set; }
}
class Player{
    +Player()
    +string Name { get; }

    +ICard[] Hand { get; }

    +HandType HandType { get; }

    +int Wins { get; }

    +ICard[] Discard {get; set; }
}
Player ..|> IPlayer
IPlayer --* HandType
enum HandType
{
    HighCard,
    Pair,
    TwoPairs,
    ThreeOfAKind,
    Straight,
    Flush,
    FullHouse,
    FourOfAKind,
    StraightFlush,
    RoyalStraightFlush,
}
IPlayer ==o ICard
Card ..|> ICard
Deck "1" --o "0-52" Card
class Deck{
    +Deck()
    +void Shuffle()
    +ICard[] Draw(int amount)
    -ICard Draw()
    List<ICard> Deck{get; set;}
}
interface ICard
{
    Suite Suite { get; }

    Rank Rank { get; }
}
class Card
{
    +Card(Rank rank, Suite suite)
    +Suite Suite{ get; }
    +Rank Rank{ get; }
}
ICard ==* Rank
ICard ==* Suite
enum Rank{
    Two = 2,
    Three,
    Four,
    Five,
    Six,
    Seven,
    Eight,
    Nine,
    Ten,
    Jack,
    Queen,
    King,
    Ace
}
enum Suite{
    Clubs,
    Diamonds,
    Hearts,
    Spades
}


@enduml